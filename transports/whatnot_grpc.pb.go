// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package transports

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StatusUpdatesClient is the client API for StatusUpdates service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatusUpdatesClient interface {
	SubscribeToEvents(ctx context.Context, in *Subscribe, opts ...grpc.CallOption) (StatusUpdates_SubscribeToEventsClient, error)
}

type statusUpdatesClient struct {
	cc grpc.ClientConnInterface
}

func NewStatusUpdatesClient(cc grpc.ClientConnInterface) StatusUpdatesClient {
	return &statusUpdatesClient{cc}
}

func (c *statusUpdatesClient) SubscribeToEvents(ctx context.Context, in *Subscribe, opts ...grpc.CallOption) (StatusUpdates_SubscribeToEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &StatusUpdates_ServiceDesc.Streams[0], "/transports.StatusUpdates/SubscribeToEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &statusUpdatesSubscribeToEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StatusUpdates_SubscribeToEventsClient interface {
	Recv() (*StateChange, error)
	grpc.ClientStream
}

type statusUpdatesSubscribeToEventsClient struct {
	grpc.ClientStream
}

func (x *statusUpdatesSubscribeToEventsClient) Recv() (*StateChange, error) {
	m := new(StateChange)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StatusUpdatesServer is the server API for StatusUpdates service.
// All implementations must embed UnimplementedStatusUpdatesServer
// for forward compatibility
type StatusUpdatesServer interface {
	SubscribeToEvents(*Subscribe, StatusUpdates_SubscribeToEventsServer) error
	mustEmbedUnimplementedStatusUpdatesServer()
}

// UnimplementedStatusUpdatesServer must be embedded to have forward compatible implementations.
type UnimplementedStatusUpdatesServer struct {
}

func (UnimplementedStatusUpdatesServer) SubscribeToEvents(*Subscribe, StatusUpdates_SubscribeToEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToEvents not implemented")
}
func (UnimplementedStatusUpdatesServer) mustEmbedUnimplementedStatusUpdatesServer() {}

// UnsafeStatusUpdatesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatusUpdatesServer will
// result in compilation errors.
type UnsafeStatusUpdatesServer interface {
	mustEmbedUnimplementedStatusUpdatesServer()
}

func RegisterStatusUpdatesServer(s grpc.ServiceRegistrar, srv StatusUpdatesServer) {
	s.RegisterService(&StatusUpdates_ServiceDesc, srv)
}

func _StatusUpdates_SubscribeToEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Subscribe)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatusUpdatesServer).SubscribeToEvents(m, &statusUpdatesSubscribeToEventsServer{stream})
}

type StatusUpdates_SubscribeToEventsServer interface {
	Send(*StateChange) error
	grpc.ServerStream
}

type statusUpdatesSubscribeToEventsServer struct {
	grpc.ServerStream
}

func (x *statusUpdatesSubscribeToEventsServer) Send(m *StateChange) error {
	return x.ServerStream.SendMsg(m)
}

// StatusUpdates_ServiceDesc is the grpc.ServiceDesc for StatusUpdates service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatusUpdates_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transports.StatusUpdates",
	HandlerType: (*StatusUpdatesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToEvents",
			Handler:       _StatusUpdates_SubscribeToEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "whatnot.proto",
}

// LeaseServiceClient is the client API for LeaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeaseServiceClient interface {
	RequestLease(ctx context.Context, in *LeaseRequest, opts ...grpc.CallOption) (*LeaseResponse, error)
	ReleaseLease(ctx context.Context, in *LeaseRelease, opts ...grpc.CallOption) (*LeaseReleaseResponse, error)
}

type leaseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaseServiceClient(cc grpc.ClientConnInterface) LeaseServiceClient {
	return &leaseServiceClient{cc}
}

func (c *leaseServiceClient) RequestLease(ctx context.Context, in *LeaseRequest, opts ...grpc.CallOption) (*LeaseResponse, error) {
	out := new(LeaseResponse)
	err := c.cc.Invoke(ctx, "/transports.LeaseService/RequestLease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaseServiceClient) ReleaseLease(ctx context.Context, in *LeaseRelease, opts ...grpc.CallOption) (*LeaseReleaseResponse, error) {
	out := new(LeaseReleaseResponse)
	err := c.cc.Invoke(ctx, "/transports.LeaseService/ReleaseLease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaseServiceServer is the server API for LeaseService service.
// All implementations must embed UnimplementedLeaseServiceServer
// for forward compatibility
type LeaseServiceServer interface {
	RequestLease(context.Context, *LeaseRequest) (*LeaseResponse, error)
	ReleaseLease(context.Context, *LeaseRelease) (*LeaseReleaseResponse, error)
	mustEmbedUnimplementedLeaseServiceServer()
}

// UnimplementedLeaseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLeaseServiceServer struct {
}

func (UnimplementedLeaseServiceServer) RequestLease(context.Context, *LeaseRequest) (*LeaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestLease not implemented")
}
func (UnimplementedLeaseServiceServer) ReleaseLease(context.Context, *LeaseRelease) (*LeaseReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseLease not implemented")
}
func (UnimplementedLeaseServiceServer) mustEmbedUnimplementedLeaseServiceServer() {}

// UnsafeLeaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeaseServiceServer will
// result in compilation errors.
type UnsafeLeaseServiceServer interface {
	mustEmbedUnimplementedLeaseServiceServer()
}

func RegisterLeaseServiceServer(s grpc.ServiceRegistrar, srv LeaseServiceServer) {
	s.RegisterService(&LeaseService_ServiceDesc, srv)
}

func _LeaseService_RequestLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaseServiceServer).RequestLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transports.LeaseService/RequestLease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaseServiceServer).RequestLease(ctx, req.(*LeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaseService_ReleaseLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaseRelease)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaseServiceServer).ReleaseLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transports.LeaseService/ReleaseLease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaseServiceServer).ReleaseLease(ctx, req.(*LeaseRelease))
	}
	return interceptor(ctx, in, info, handler)
}

// LeaseService_ServiceDesc is the grpc.ServiceDesc for LeaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transports.LeaseService",
	HandlerType: (*LeaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestLease",
			Handler:    _LeaseService_RequestLease_Handler,
		},
		{
			MethodName: "ReleaseLease",
			Handler:    _LeaseService_ReleaseLease_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "whatnot.proto",
}
